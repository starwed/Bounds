// Generated by CoffeeScript 1.4.0
(function() {
  var Clamp, Crafty, FLUSH_SAVES, INSTRUCTIONS, INSTRUCTIONS2, audioPlaying, levelSelect, levels, ll, loadScene, map, sliceSprites, spriteInfo, spriteList, waitForMap, _i, _len, _ref;

  console.log("Bounds load");

  Crafty = window.Crafty;

  Clamp = function(x, a, b) {
    return Math.min(Math.max(x, a), b);
  };

  FLUSH_SAVES = true;

  INSTRUCTIONS = "<div>\n    <b>Arrows</b> move.<br/>\n    <b>Q</b> & <b>E</b> jump left & right.<br/>\n    <b>Down</b> slides off a ledge.<br/> \n    <br/>\n    <b>G</b> toggles grid.<br/>\n    <b>K</b> restarts.<br/>  \n    <b>Esc</b> for level select.\n</div>  ";

  INSTRUCTIONS2 = "<div>\n    <b>Arrows</b> move.<br/>\n    <b>Q</b> & <b>E</b> jump left & right.<br/>\n    <b>?</b> for more info.<br/> \n</div>  ";

  spriteInfo = [
    {
      img: "question.png",
      x: 32,
      y: 32,
      map: {
        questionmark: [0, 0]
      }
    }, {
      img: "tractor2.png",
      x: 32,
      y: 32,
      map: {
        tract1: [0, 0],
        tract2: [1, 0],
        tract3: [2, 0],
        tract4: [3, 0],
        tract5: [4, 0],
        tract6: [5, 0]
      }
    }, {
      img: "question.png",
      x: 32,
      y: 32,
      map: {
        questionmark: [0, 0]
      }
    }
  ];

  map = {};

  Bounds.levels = levels = [
    {
      url: "GoingUp.json",
      name: "Going Up",
      par: {
        m: 4,
        t: 20
      }
    }, {
      url: "FloorspikesIntro.json",
      name: "Mind the Gap",
      par: {
        m: 3,
        t: 5
      }
    }, {
      url: "Plateau.json",
      name: "Plateau",
      par: {
        m: 5,
        t: 15
      }
    }, {
      url: "TheDescent2.json",
      name: "The Descent",
      par: {
        m: 3,
        t: 9
      }
    }, {
      url: "FalseDichotomy.json",
      name: "The Choice",
      par: {
        m: 2,
        t: 7
      }
    }, {
      url: "NoHesitation.json",
      name: "No Hesitation",
      par: {
        m: 3,
        t: 8
      }
    }, {
      url: "HeadRoom.json",
      name: "Head Room",
      par: {
        m: 2,
        t: 60
      }
    }, {
      url: "RubyIntro.json",
      name: "Watch the Red",
      par: {
        m: 1,
        t: 5
      }
    }, {
      url: "HalfPower.json",
      name: "Half Power",
      par: {
        m: 1,
        t: 8
      }
    }, {
      url: "EmeraldIntro.json",
      name: "Emerald Steps",
      par: {
        m: 5,
        t: 8
      }
    }, {
      url: "ThereAndBack.json",
      name: "There And Back Again",
      par: {
        m: 7,
        t: 60
      }
    }, {
      url: "UpAndDown.json",
      name: "Up and Down",
      par: {
        m: 5,
        t: 17
      }
    }, {
      url: "ParityViolation.json",
      name: "Parity Violation",
      par: {
        m: 6,
        t: 20
      }
    }, {
      url: "BlockIntro.json",
      name: "Just Push It",
      par: {
        m: 2,
        t: 13
      }
    }, {
      url: "GolfingUphill.json",
      name: "Hit Jump While Pushing",
      par: {
        m: 6,
        t: 60
      }
    }, {
      url: "TargetPractice.json",
      name: "Target Practice",
      par: {
        m: 0,
        t: 60
      }
    }, {
      url: "Jaws.json",
      name: "Jaws",
      par: {
        m: 2,
        t: 30
      }
    }, {
      url: "Forcefield.json",
      name: "Forcefield",
      par: {
        m: 1,
        t: 60
      }
    }, {
      url: "FullPower.json",
      name: "Full Power",
      par: {
        m: 1,
        t: 8
      }
    }, {
      url: "NegativeIntro.json",
      name: "Introduction to Negativity",
      par: {
        m: 2,
        t: 60
      }
    }, {
      url: "MultipleChoice.json",
      name: "Multiple Choice",
      par: {
        m: 5,
        t: 30
      }
    }, {
      url: "TwoShortWalls.json",
      name: "Two Short Walls",
      par: {
        m: 3,
        t: 60
      }
    }, {
      url: "pyramid.json",
      name: "Pyramid",
      par: {
        m: 5,
        t: 120
      }
    }, {
      url: "thedig.json",
      name: "The Dig",
      par: {
        m: 4,
        t: 120
      }
    }, {
      url: "Drawbridge.json",
      name: "Drawbridge",
      par: {
        m: 5,
        t: 60
      }
    }, {
      url: "MenInHats.json",
      name: "The Hat of Death",
      par: {
        m: 2,
        t: 7
      }
    }, {
      url: "GlassIntro.json",
      name: "Seven Steps Up",
      par: {
        m: 5,
        t: 12
      }
    }, {
      url: "CentralLimit.json",
      name: "Central Limit",
      par: {
        m: 6,
        t: 90
      }
    }, {
      url: "LittleBoxes.json",
      name: "Little Boxes",
      par: {
        m: 7,
        t: 20
      }
    }, {
      url: "Quintet.json",
      name: "Quintet",
      par: {
        m: 7,
        t: 20
      }
    }, {
      url: "Pillar.json",
      name: "Pilla r Assault",
      par: {
        m: 3,
        t: 30
      }
    }, {
      url: "GoodIntentions.json",
      name: "Good Intentions",
      par: {
        m: 6,
        t: 30
      }
    }
  ];

  _ref = Bounds.levels;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    ll = _ref[_i];
    ll.url = "levels/" + ll.url;
  }

  spriteList = ["sprites/tractor3.png", "sprites/negative-transition", "sprites/crumble-brick.png", "sprites/metal-tiles-bluesteel.png", "sprites/metal-tiles3.png", "sprites/nebula.jpg", "sprites/gradient1.png", "sprites/antiblock.png", "sprites/block-test.png", "sprites/grid.png", "sprites/question.png", "sprites/glass-brick2.png", "sprites/alien.png", "sprites/side-flames.png", "sprites/bottom-flames2.png", "sprites/down_arrow.png"];

  loadScene = function() {
    console.log("Running loadscene");
    Bounds.loadCompletion();
    Crafty.audio.add('bounce', 'audio/hit.wav');
    Crafty.audio.add('death', 'audio/death.wav');
    Crafty.audio.add('music-track-1', 'audio/alien-puzzle.wav');
    Crafty.audio.add('shatter', 'audio/glass-breaking-mike-koenig.wav');
    Crafty.audio.add('jump', 'audio/jump3.wav');
    Crafty.audio.add('gem', 'audio/gem2.wav');
    Crafty.load(spriteList, function() {
      return Crafty.scene("select");
    });
    sliceSprites();
    return Crafty.background("#000");
  };

  waitForMap = function(level, glyph) {
    var counter;
    console.log("Waiting for map " + glyph);
    if (map != null) {
      if (typeof map.destroy === "function") {
        map.destroy();
      }
    }
    map = Crafty.e("TiledLevel").tiledLevel(level.url).bind("TiledLevelLoaded", function() {
      return Bounds.playMap(level, glyph);
    });
    return counter = 0;
  };

  audioPlaying = false;

  levelSelect = function() {
    var clickFactory, col, completionPoints, completionRate, hoverFactory, instructions2, lIndex, lev, level, levelMenu, levelText, parText, passMarker, passedText, rateText, row, selectorBG, selectorText, xpos, _j, _len1, _ref1, _ref2;
    if (!audioPlaying) {
      Crafty.audio.play("music-track-1", -1, .5);
      audioPlaying = true;
    }
    console.log("Running level select scene");
    Bounds.sceneChangeQueued = false;
    levelMenu = [];
    xpos = 0;
    clickFactory = function(name, lIndex) {
      return function() {
        console.log("Loading " + name);
        Bounds.CURRENT_LEVEL = lIndex;
        return Crafty.scene("load " + lIndex);
      };
    };
    levelText = Crafty.e("UIText");
    passedText = Crafty.e("UIText").css({
      "font-size": "12px"
    }).textColor('#DDDDDD', 1);
    parText = Crafty.e("UIText").css({
      "font-size": "12px"
    }).textColor('#DDDDDD', 1);
    hoverFactory = function(level, l) {
      var levH, level_description, par_description, passed_description;
      level_description = level.name;
      levH = Bounds.completion.levels[level.url];
      if ((levH != null ? levH.passed : void 0) === true) {
        passed_description = "&nbsp;Best: &nbsp;" + levH.m + " mv, " + levH.t + " s";
        if (level.par != null) {
          par_description = "&nbsp;Par:  " + level.par.m + " mv,  " + level.par.t + " s";
        }
      } else {
        passed_description = "";
        par_description = "";
      }
      return function() {
        levelText.text(level_description);
        passedText.text(passed_description);
        return parText.text(par_description);
      };
    };
    completionPoints = 0;
    for (lIndex = _j = 0, _len1 = levels.length; _j < _len1; lIndex = ++_j) {
      level = levels[lIndex];
      console.log("Creating text");
      try {
        row = 50 * (xpos % 8) + 50;
        col = 50 + 50 * Math.floor(xpos / 8);
        selectorText = Crafty.e("UIText").attr({
          x: row + 2,
          y: col + 2
        }).text("" + (lIndex + 1)).textColor('#0000FF', 1).textFont({
          size: "13pt",
          weight: "normal"
        });
        selectorBG = Crafty.e("2D, Color, Canvas, Mouse").attr({
          x: row,
          y: col,
          w: 30,
          h: 30
        }).color("#ffffff").bind("Click", clickFactory(level.name, lIndex)).bind("MouseOver", hoverFactory(level, lIndex));
        lev = Bounds.completion.levels[level.url];
        if ((lev != null ? lev.passed : void 0) === true) {
          completionPoints++;
          passMarker = Crafty.e("2D, Color, Canvas, Mouse").attr({
            x: row + 24,
            y: col + 24,
            w: 4,
            h: 4
          }).color("red");
          if (lev.t <= ((_ref1 = level.par) != null ? _ref1.t : void 0) && lev.m <= ((_ref2 = level.par) != null ? _ref2.m : void 0)) {
            selectorText.textFont({
              weight: "normal"
            }).textColor('#0000FF', 1);
            passMarker.color("blue").attr({
              w: 6,
              h: 6
            });
            completionPoints++;
          }
        }
      } catch (e) {
        console.log(e);
      }
      xpos++;
    }
    completionRate = Math.floor((completionPoints / 64) * 100);
    console.log("Completion " + completionPoints);
    rateText = Crafty.e("UIText").attr({
      x: 550,
      y: 50
    }).text("" + completionRate + "%").css({
      "font-size": "200px"
    }).textFont({
      size: "200px"
    }).attr({
      alpha: completionRate * completionRate / 10000 + .001
    });
    levelText.attr({
      x: 50,
      y: col + 50
    }).text("");
    passedText.attr({
      x: 50,
      y: col + 95
    }).text("        ");
    parText.attr({
      x: 50,
      y: col + 75
    }).text("");
    return instructions2 = Crafty.e("2D, DOM, HTML, Keyboard").attr({
      x: 50,
      y: col + 150,
      w: 350 + 32
    }).replace("<h1>Bounds</h1>\n" + INSTRUCTIONS2 + " \n <br/><br/><small> <a href=\"attribution.html\">Attributions</a></small>").css({
      'font-family': 'Helvetica, Arial',
      'text-align': 'right',
      'font-size': '14pt',
      'color': 'white',
      'width': '400'
    }).bind("KeyDown", function(e) {
      if (e.key === 191) {
        return instructions2.replace("<h1>Bounds</h1>" + INSTRUCTIONS + " ");
      }
    });
  };

  sliceSprites = function() {
    /*Crafty.sprite(48, "guard.png", {
        guard1: [0,0],
        guard2: [1,0]
        guardx: [2,0]} )
    */
    Crafty.sprite(32, 32, "sprites/question.png", {
      questionmark: [0, 0]
    });
    Crafty.sprite(64, 64, "sprites/down_arrow.png", {
      downArrow: [0, 0]
    });
    Crafty.sprite(960, 640, "sprites/gradient1.png", {
      backdrop: [0, 0]
    });
    Crafty.sprite(960, 640, "sprites/grid.png", {
      gridPattern: [0, 0]
    });
    /*Crafty.sprite(32, "shockwave.png", {
        shockwaveLeft: [0,0]
    })
    */

    Crafty.sprite(32, "sprites/block-test.png", {
      midBlock1: [0, 0],
      topBlock1: [1, 0]
    });
    Crafty.sprite(32, "sprites/metal-tiles-bluesteel.png", {
      edgeMetal: [0, 0],
      innerMetal: [1, 0]
    });
    Crafty.sprite(32, "sprites/antiblock.png", {
      anti1: [0, 0],
      anti2: [1, 0]
    });
    Crafty.sprite(32, "sprites/metal-tiles3.png", {
      outerEdge: [0, 0],
      outerAlt: [1, 0]
    });
    /*Crafty.sprite(32, "arrow-up.png", {
        arrowSprite: [0,0]
    })
    */

    Crafty.sprite(32, "sprites/tractor3.png", {
      tract1: [0, 0],
      tract2: [1, 0],
      tract3: [2, 0],
      tract4: [3, 0],
      tract5: [4, 0],
      tract6: [5, 0]
    });
    /*Crafty.sprite(16, "test.png", {
        t1: [0,0],
        t2: [1,0]
        t3: [2,0]} )
    */

    Crafty.sprite(28, 24, "sprites/alien-sprites.png", {
      alienNorm: [0, 0],
      alienDie: [1, 0],
      alienR: [2, 0],
      alienL: [3, 0],
      alienLeanL: [4, 0]
    });
    Crafty.sprite(32, 32, "sprites/negative-transition.png", {
      negt1: [0, 0],
      negt2: [1, 0],
      negt3: [2, 0]
    });
    Crafty.sprite(32, 32, "sprites/crumble-brick.png", {
      crBrick1: [0, 0],
      crBrick2: [1, 0],
      crBrick3: [2, 0]
    });
    Crafty.sprite(32, 32, "sprites/glass-brick2.png", {
      gbL: [0, 0],
      gbM: [1, 0],
      gbR: [2, 0]
    });
    Crafty.sprite(10, 8, "sprites/side-flames.png", {
      rightFlame: [0, 0],
      leftFlame: [1, 0]
    });
    return Crafty.sprite(18, 17, "sprites/bottom-flames2.png", {
      leftJet: [0, 0],
      rightJet: [1, 0]
    });
  };

  window.onload = function() {
    var HEIGHT, WIDTH, lIndex, level, loadFactory, _j, _len1;
    WIDTH = 1200;
    HEIGHT = 640;
    console.log("==== Pre init =====\n");
    Crafty.init(WIDTH, HEIGHT);
    Crafty.e("Benchmarks, Persist");
    Crafty.timer.steptype("semifixed", 35);
    console.log("==== POST init =====\n");
    Crafty.DrawManager.debugDirty = false;
    loadFactory = function(map, glyph) {
      return function() {
        return waitForMap(map, glyph);
      };
    };
    console.log("Creating scenes");
    for (lIndex = _j = 0, _len1 = levels.length; _j < _len1; lIndex = ++_j) {
      level = levels[lIndex];
      Crafty.scene("load " + lIndex, loadFactory(level, lIndex));
    }
    console.log("scenes done");
    Crafty.scene("loading", loadScene);
    Crafty.scene("select", levelSelect);
    return Crafty.scene("loading");
  };

  console.log("All js files loaded");

}).call(this);
